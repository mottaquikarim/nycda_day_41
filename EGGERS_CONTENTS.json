{"home":{"content":"# Join Tables, Feed Queries, Group Project\n\nWelcome to **Lecture 41**! Here is a brief class breakdown.\n\n## Learning Objectives\n1. Understand **JOIN** table syntax\n2. Consider a possible schema structure for feed creation\n\n## To Do Today\n\n### [Warmup](#warmup)\n### [Feeds](#feeds)\n### [Instagram Clone](#instagram-clone)\n","idx":0},"title":{"content":"Join Tables, Feed Queries, Group Project","idx":1},"desc":{"content":"Using join tables to perform complex queries","idx":2},"warmup":{"content":"# Warmup\n\nLet's begin with a few practice exercises.\n\n## Repo\n\nBefore beginning, please git clone **[this](https://github.com/mottaquikarim/nycda_lecture41)** repo containing our class files!\n\n## SQL Reference\nHere is a handy **[SQLite Reference](https://www.tutorialspoint.com/sqlite/index.htm)**; I'd keep this open in a new tab.\n\n## Exercise 1\n\nAssuming you have today's repo cloned, please `cd` into **company-ops**, `npm install`, `npm start`.\n\nIf you head on over to **[http://localhost:4001/](http://localhost:4001/)** - the SQLite visualizer - you should see a bunch of tables.\n\nIn your visualizer - and using only the tables / content given - write queries that accomplish the following:\n\n1. **Filter out** all employees with id > 3\n2. **Filter out** all employees with names that contains the letters **iz** (**[this](https://www.w3schools.com/sql/sql_like.asp)** should help)\n3. **Load** a table that contains all employees and their respective **department ids** (you will need to **[inner join](https://www.tutorialspoint.com/sqlite/sqlite_using_joins.htm)**)\n4. **Load** a table that contains all **departments** and their respective **employee_ids** (you will need to **[inner join](https://www.tutorialspoint.com/sqlite/sqlite_using_joins.htm)**)\n5. **Load** a table containing the following **columns only**:\n * **employee.name**, labeled as **employee_name**\n * **employee.id**, labeled as **employee_id**\n * **dept.name**, labeled as **dept_name**\n\nFor item **5**, you will need to do some thinking. Consider this answer on **[Stack Overflow](http://stackoverflow.com/a/8160988)**.\n\n## Exercise 2\n\nUse join tables to implement: \n\n1. **/dept/:dept_id/employees**\n2. **/employees/:employee_id/dept**\n\n## Exercise 3\n\nRefactor the code from **index.js** that deals with DB calls into an **employee.js** and **dept.js**\n\n\n","idx":3},"feeds":{"content":"# Feeds\n","idx":4},"instagram-clone":{"content":"# Instagram Clone\n","idx":5},"__list__":["home","title","desc","warmup","feeds","instagram-clone"]}